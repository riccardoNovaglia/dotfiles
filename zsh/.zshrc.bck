export ZSH="$HOME/.oh-my-zsh"

ZSH_THEME="robbyrussell"

#########
# Plugins

# Built-in
plugins=(autojump git)

# git clone https://github.com/zsh-users/zsh-syntax-highlighting $ZSH_CUSTOM/plugins/zsh-syntax-highlighting
plugins+=(zsh-syntax-highlighting)

# git clone https://github.com/ptavares/zsh-direnv $ZSH_CUSTOM/plugins/zsh-direnv
plugins+=(zsh-direnv)

# git clone https://github.com/lukechilds/zsh-nvm $ZSH_CUSTOM/plugins/zsh-nvm
export NVM_AUTO_USE=true
export NVM_LAZY_LOAD=false
export NVM_COMPLETION=true
plugins+=(zsh-nvm)

# git clone https://github.com/MichaelAquilina/zsh-you-should-use $ZSH_CUSTOM/plugins/zsh-nvm
plugins+=(you-should-use)
export YSU_MESSAGE_POSITION="after"

#########

source $ZSH/oh-my-zsh.sh
source ~/projects/me/dotfiles/zsh/aliases.zsh

# pyenv
export PYENV_ROOT="$HOME/.pyenv"
export PATH="$PYENV_ROOT/bin:$PATH"
export PATH="$PYENV_ROOT/shims:$PATH"
eval "$(pyenv init -)"

# virtualenvwrapper
export WORKON_HOME=$HOME/.virtualenvs
pyenv virtualenvwrapper

# RabbitMQ
export PATH=/usr/local/sbin:$PATH

export NODE_OPTIONS=--max-old-space-size=6144

# Invoke tab-completion script to be sourced with the Z shell.
# Known to work on zsh 5.0.x, probably works on later 4.x releases as well (as
# it uses the older compctl completion system).
_complete_invoke() {
    # `words` contains the entire command string up til now (including
    # program name).
    #
    # We hand it to Invoke so it can figure out the current context: spit back
    # core options, task names, the current task's options, or some combo.
    #
    # Before doing so, we attempt to tease out any collection flag+arg so we
    # can ensure it is applied correctly.
    collection_arg=''
    if [[ "${words}" =~ "(-c|--collection) [^ ]+" ]]; then
        collection_arg=$MATCH
    fi
    # `reply` is the array of valid completions handed back to `compctl`.
    # Use ${=...} to force whitespace splitting in expansion of
    # $collection_arg
    reply=( $(invoke ${=collection_arg} --complete -- ${words}) )
}

# Tell shell builtin to use the above for completing our given binary name(s).
# * -K: use given function name to generate completions.
# * +: specifies 'alternative' completion, where options after the '+' are only
#   used if the completion from the options before the '+' result in no matches.
# * -f: when function generates no results, use filenames.
# * positional args: program names to complete for.
compctl -K _complete_invoke + -f invoke inv

# 1pass OP completions
eval "$(op completion zsh)"; compdef _op op

export PATH="$HOME/.yarn/bin:$HOME/.config/yarn/global/node_modules/.bin:$PATH"

# JetBrains launch scripts
export PATH="$HOME/.idea/cmd:$PATH"

# Poetry
export PATH="~/.local/bin:$PATH"

[ -f ~/.fzf.zsh ] && source ~/.fzf.zsh
